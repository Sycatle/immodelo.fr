// optimize_database.js
// Ce script cr√©e des index cl√©s, v√©rifie la qualit√© des donn√©es, et affiche des recommandations.

const { Pool } = require('pg');

async function optimize() {
  // ‚ö†Ô∏è Adaptez la connectionString si n√©cessaire (port, host, credentials).
  const pool = new Pool({
    connectionString: 'postgres://dvf:dvfpass@localhost:5433/dvfdb'
  });

  const client = await pool.connect();
  try {
    console.log('üîß Cr√©ation des index...');
    await client.query(`
      CREATE INDEX IF NOT EXISTS idx_dvf_date_mutation
        ON dvf_sales(date_mutation);
      CREATE INDEX IF NOT EXISTS idx_dvf_code_postal
        ON dvf_sales(code_postal);
      CREATE INDEX IF NOT EXISTS idx_dvf_commune
        ON dvf_sales(commune);
      CREATE INDEX IF NOT EXISTS idx_dvf_type_local
        ON dvf_sales(type_local);
    `);
    console.log('‚úÖ Index cr√©√©s.');

    console.log('\nüîç V√©rification de la plage de dates :');
    const { rows: dateRows } = await client.query(`
      SELECT
        MIN(date_mutation) AS min_date,
        MAX(date_mutation) AS max_date
      FROM dvf_sales;
    `);
    console.log(`üìÖ De ${dateRows[0].min_date.toISOString().slice(0,10)} √† ${dateRows[0].max_date.toISOString().slice(0,10)}`);

    console.log('\nüîç Comptage des valeurs manquantes :');
    const { rows: nullRows } = await client.query(`
      SELECT
        COUNT(*) FILTER (WHERE valeur_fonciere IS NULL) AS no_price,
        COUNT(*) FILTER (WHERE surface_reelle_bati IS NULL) AS no_surface
      FROM dvf_sales;
    `);
    console.log(`üí∞ ventes sans prix : ${nullRows[0].no_price}`);
    console.log(`üè† ventes sans surface bati : ${nullRows[0].no_surface}`);

    console.log('\nüí° Recommandations :');
    console.log('- Envisager la partition de dvf_sales PAR RANGE(date_mutation) pour am√©liorer les performances');
    console.log('  (ex. partitions 2022, 2023, 2024, etc.).');
    console.log('- Si vous avez un tr√®s gros volume √† venir, charger en une seule grosse op√©ration via COPY depuis un CSV.');
    console.log('- Pensez √† archiver ou purger les colonnes dont vous n‚Äôavez pas besoin.');

  } catch (err) {
    console.error('‚ùå Erreur lors de l‚Äôoptimisation :', err);
  } finally {
    client.release();
    await pool.end();
  }
}

optimize();
